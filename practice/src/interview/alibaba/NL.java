package interview.alibaba;

import java.util.Scanner;

/**
 * 例如 N = 18 L = 2：
 * 5 + 6 + 7 = 18
 * 3 + 4 + 5 + 6 = 18
 * 都是满足要求的，但是我们输出更短的 5 6 7
 *
 * 输入数据包括一行： 两个正整数N(1 ≤ N ≤ 1000000000),L(2 ≤ L ≤ 100)
 * 从小到大输出这段连续非负整数，以空格分隔，行末无空格。如果没有这样的序列或者找出的序列长度大于100，则输出No
 */
public class NL {
    public static void main(String[] args) {
//        Scanner in = new Scanner(System.in);
//        int N = in.nextInt();
//        int L = in.nextInt();
//        in.close();
//        // 从N/2往后找，
//        // 从N/2往后找，
//        for (int i = N/2; i > 0; i --) {
//            for (int j = i - L + 1; j > 0; j --) {
//                int len = i - j + 1;
//                if (len > 100) break;
//                else {
//                    long tmp = ((long)i + (long)j) * (long)len >>> 1;
//                    if (tmp == (long)N) {
//                        System.out.print(j);
//                        for (int k = j + 1; k <= i; k ++) {
//                            System.out.printf(" " + k);
//                        }
//                        return;
//                    }
//                }
//            }
//        }
//        System.out.printf("No");
        mathWay();
    }

    // 回顾下等差数列求和公式，变换公式得到起点a1，然后就可以根据长度得到所有的连续序列
    public static void mathWay() {
        Scanner in = new Scanner(System.in);
        int N = in.nextInt();
        int L = in.nextInt();
        in.close();

        for (int i = L; i <= 100; i ++) {
            if ((2 * N + i - i * i) % (2 * i) == 0) {
                int a1 = (2 * N + i - i * i) / (2 * i);
                System.out.print(a1);
                for (int k = a1 + 1; k <= a1 + i - 1; k ++) {
                    System.out.printf(" " + k);
                }
                return;
            }
        }
        System.out.printf("No");
    }
}

// 268519824
// 268519825
// 268519826
// 268519827

// 268519905